package com.barran.gank.libs.greendao;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "DATA_INFO_ENTITY".
*/
public class DataInfoEntityDao extends AbstractDao<DataInfoEntity, Long> {

    public static final String TABLENAME = "DATA_INFO_ENTITY";

    /**
     * Properties of entity DataInfoEntity.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "id", true, "_id");
        public final static Property InfoId = new Property(1, String.class, "infoId", false, "INFO_ID");
        public final static Property Type = new Property(2, String.class, "type", false, "TYPE");
        public final static Property CreateTime = new Property(3, long.class, "createTime", false, "CREATE_TIME");
        public final static Property PublishTime = new Property(4, long.class, "publishTime", false, "PUBLISH_TIME");
        public final static Property Desc = new Property(5, String.class, "desc", false, "DESC");
        public final static Property LinkUrl = new Property(6, String.class, "linkUrl", false, "LINK_URL");
        public final static Property Author = new Property(7, String.class, "author", false, "AUTHOR");
        public final static Property Image = new Property(8, String.class, "image", false, "IMAGE");
        public final static Property Read = new Property(9, boolean.class, "read", false, "READ");
        public final static Property Favored = new Property(10, boolean.class, "favored", false, "FAVORED");
    }


    public DataInfoEntityDao(DaoConfig config) {
        super(config);
    }
    
    public DataInfoEntityDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"DATA_INFO_ENTITY\" (" + //
                "\"_id\" INTEGER PRIMARY KEY AUTOINCREMENT ," + // 0: id
                "\"INFO_ID\" TEXT UNIQUE ," + // 1: infoId
                "\"TYPE\" TEXT," + // 2: type
                "\"CREATE_TIME\" INTEGER NOT NULL ," + // 3: createTime
                "\"PUBLISH_TIME\" INTEGER NOT NULL ," + // 4: publishTime
                "\"DESC\" TEXT," + // 5: desc
                "\"LINK_URL\" TEXT," + // 6: linkUrl
                "\"AUTHOR\" TEXT," + // 7: author
                "\"IMAGE\" TEXT," + // 8: image
                "\"READ\" INTEGER NOT NULL ," + // 9: read
                "\"FAVORED\" INTEGER NOT NULL );"); // 10: favored
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"DATA_INFO_ENTITY\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, DataInfoEntity entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        String infoId = entity.getInfoId();
        if (infoId != null) {
            stmt.bindString(2, infoId);
        }
 
        String type = entity.getType();
        if (type != null) {
            stmt.bindString(3, type);
        }
        stmt.bindLong(4, entity.getCreateTime());
        stmt.bindLong(5, entity.getPublishTime());
 
        String desc = entity.getDesc();
        if (desc != null) {
            stmt.bindString(6, desc);
        }
 
        String linkUrl = entity.getLinkUrl();
        if (linkUrl != null) {
            stmt.bindString(7, linkUrl);
        }
 
        String author = entity.getAuthor();
        if (author != null) {
            stmt.bindString(8, author);
        }
 
        String image = entity.getImage();
        if (image != null) {
            stmt.bindString(9, image);
        }
        stmt.bindLong(10, entity.getRead() ? 1L: 0L);
        stmt.bindLong(11, entity.getFavored() ? 1L: 0L);
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, DataInfoEntity entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        String infoId = entity.getInfoId();
        if (infoId != null) {
            stmt.bindString(2, infoId);
        }
 
        String type = entity.getType();
        if (type != null) {
            stmt.bindString(3, type);
        }
        stmt.bindLong(4, entity.getCreateTime());
        stmt.bindLong(5, entity.getPublishTime());
 
        String desc = entity.getDesc();
        if (desc != null) {
            stmt.bindString(6, desc);
        }
 
        String linkUrl = entity.getLinkUrl();
        if (linkUrl != null) {
            stmt.bindString(7, linkUrl);
        }
 
        String author = entity.getAuthor();
        if (author != null) {
            stmt.bindString(8, author);
        }
 
        String image = entity.getImage();
        if (image != null) {
            stmt.bindString(9, image);
        }
        stmt.bindLong(10, entity.getRead() ? 1L: 0L);
        stmt.bindLong(11, entity.getFavored() ? 1L: 0L);
    }

    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    @Override
    public DataInfoEntity readEntity(Cursor cursor, int offset) {
        DataInfoEntity entity = new DataInfoEntity( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // infoId
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // type
            cursor.getLong(offset + 3), // createTime
            cursor.getLong(offset + 4), // publishTime
            cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5), // desc
            cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6), // linkUrl
            cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7), // author
            cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8), // image
            cursor.getShort(offset + 9) != 0, // read
            cursor.getShort(offset + 10) != 0 // favored
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, DataInfoEntity entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setInfoId(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setType(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setCreateTime(cursor.getLong(offset + 3));
        entity.setPublishTime(cursor.getLong(offset + 4));
        entity.setDesc(cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5));
        entity.setLinkUrl(cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6));
        entity.setAuthor(cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7));
        entity.setImage(cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8));
        entity.setRead(cursor.getShort(offset + 9) != 0);
        entity.setFavored(cursor.getShort(offset + 10) != 0);
     }
    
    @Override
    protected final Long updateKeyAfterInsert(DataInfoEntity entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    @Override
    public Long getKey(DataInfoEntity entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    @Override
    public boolean hasKey(DataInfoEntity entity) {
        return entity.getId() != null;
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
